#
# A couple of useful guides & docs:
#
# - Main Bitrise CLI docs: https://github.com/bitrise-io/bitrise/tree/master/_docs
# - Step Development Guideline: https://github.com/bitrise-io/bitrise/blob/master/_docs/step-development-guideline.md
# - Bitrise.yml format spec: https://github.com/bitrise-io/bitrise/blob/master/_docs/bitrise-yml-format-spec.md
# - Bitrise docs: http://devcenter.bitrise.io/
# - Bitrise CLI guides: http://devcenter.bitrise.io/bitrise-cli/

title: |-
  script-go
summary: |
  Run any custom script you want. Better color support, timestamp and error handling
description: |
  Script runner written in GoLang for proper coloring and error handling.

  Run any custom script you want as part of your Bitrise build. All you need to do is specifying the script runner  
  (the default is bash), add the script, and run a build. 
  
  You can also read the script from a file.

  ### Configuring the Step

  1. Set the **Execute with/runner binary** input.

     Either define the path of the executor, or simply just add its name if you know it is available in the PATH, such as `ruby` or `python`. It can even be a command, such as `go run`.  

  1. Write your script in the **Script content** input or specify a script file.

     If you have a script in your repository, you can simply run it from the file, either by calling it in the **Script content** input  
     or, optionally, by specifying the path to it in the **Script file path** input. 
     
     Be aware that relative paths are relative to the value set in the **Working directory** input - by default, it is your app's source directory.

website: https://github.com/sergeykhliustin/bitrise-step-script-go
source_code_url: https://github.com/sergeykhliustin/bitrise-step-script-go
support_url: https://github.com/sergeykhliustin/bitrise-step-script-go/issues
host_os_tags:
  - osx
  - ubuntu
type_tags:
  - utility
is_requires_admin_user: false
is_always_run: false
is_skippable: false

toolkit:
  go:
    package_name: github.com/sergeykhliustin/bitrise-step-script-go

inputs:
  - content: |-
      #!/usr/bin/env bash
      # fail if any commands fails
      set -e
      # make pipelines' return status equal the last command to exit with a non-zero status, or zero if all commands exit successfully
      set -o pipefail
      # debug log
      set -x

      # write your script here
      echo "Hello World!"

      # or run a script from your repository, like:
      # bash ./path/to/script.sh
      # not just bash, e.g.:
      # ruby ./path/to/script.rb
    opts:
      title: "Script content"
      description: |
        Type your script here.

        **Make sure that it returns a non zero exit code in case of an error!**
        The step will only fail if your script returns with a non zero exit code!
      is_expand: false
      is_required: true
  - runner_bin: "/bin/bash"
    opts:
      category: Config
      title: "Execute with / runner binary"
      description: |
        The executor to be used for running the script.
        If it's available in the PATH you can just
        specify `ruby` or `python`, generally
        if you know the path of the executor you should
        define that, like `/bin/bash`.

        You can even specify an execution command
        like `go run` instead of just a binary.
      is_required: true
  - working_dir: "$BITRISE_SOURCE_DIR"
    opts:
      category: Config
      title: "Working directory"
      description: |
        This directory will be set as the current working
        directory for the script.

        Any relative path in the Script (content) will be
        relative to this directory.
  - script_file_path: ""
    opts:
      category: Config
      title: "Script file path"
      description: |
        Save the specified script content to this path
        before execution. The file will be removed after
        the script finishes.

        Generally you don't have to define this but
        there might be cases where the file's name or path
        actually matters.
        For example `go run` only accepts `.go` files.

        If you specify a relative path then it will be
        relative to the *working directory* (which you
        can optionally specify as well).
  - timestamp: "no"
    opts:
      category: Config
      title: Enable timestamp for logs?
      description: Enable timestamp for logs?
      is_required: true
      value_options:
      - "yes"
      - "no"
  - is_debug: "no"
    opts:
      category: Debug
      title: "Debug print?"
      description: |
        If debug=yes the step will print debug infos about
        the working dir, tmp file path, exit code, etc.
      value_options:
        - "no"
        - "yes"
